@startuml
start

:R0 <-- MSG-INPUT ("Input a 2 digit decimal number: "
PUTS
JSR readS;

:                      **readS**
(Same as 2nd assignement flowchart);
:JSR isPrime;
:                      **isPrime**
(Same as 3rd assignemnt flowchart);

:JSR resultS;
rectangle "                     resultS" {


:R0 <-- !R0
R0 <-- !R0;
if (R0 ?= 0) then (Yes)
rectangle            "SKIP" {
:LEA R0 <-- MSG-IS-NOT-PRIME
PUTS
RET;
}
else (No)
:LEA R0 <-- MSG-IS-PRIME
PUTS
RET;
endif
}
:HALT;
stop










/'THIS IS COMMENTED OUT CODE'/




/'rectangle "                 readS" {
:M[SAVEREG1] <-- R1
M[SAVEREG2] <-- R2
M[SAVEREG3] <-- R3
R2 <-- R2 && 0
R3 <-- R2 + 5
IN (Recieve input from keyboard)
R1 <--R2 + R0
IN (Recieve input from keyboard)
R2 <-- M[CVT] (Convert to corresponding decimal value)
R0 <-- R0 + R2
R1 <-- R1 + R2
R2 <-- R2 && 0;

repeat:R2 <-- R2 + R1\nR3 <-- R3 + (-1);
repeat while (R3 ?= 0) is (No)
-> Yes;
:R2 <-- R2 + R2
R0 <-- R2 + R0
R1 <-- SAVEREG1
R2 <-- SAVEREG2
R3 <-- SAVEREG3
RET;
}'/

/'rectangle "                        isPrime" {

:SAVE2REG1 <-- R1
SAVE2REG2 <-- R2
SAVE2REG3 <-- R3
SAVE2REG4 <-- R4
SAVE2REG5 <-- R5
RETURNADDRESS <-- R7;

:R1 <-- R0 + (-2);

if (R1 ?= 0) then (Yes)
rectangle "                    PRIME" {
:R0 <-- R0 && 0
R0 <-- R0 + 1;
}
rectangle "                           RESTOREREG" {

:R1 <-- SAVE2REG1
R2 <-- SAVE2REG2
R3 <-- SAVE2REG3
R4 <-- SAVE2REG4
R5 <-- SAVE2REG5
R7 <-- RETURNADDRESS
RET;
:HALT;
stop
}

else (No)
:R1 <-- R0 + 1;
endif
if (R1 ?= 0) then (Yes)
rectangle "                    NOTPRIME" {

:R0 <-- R0 && 0;
}
:**RESTOREREG**;
:HALT;
stop
else (No)
:R2 <-- R2 && 0
R2 <-- R2 + (-1);
endif
rectangle "                    ODD" {

:R2 <-- R2 + (-2)\nR3 <-- R0 + R2;
if (R3 ?= 0) then (Yes)
:**PRIME**;
:**RESTOREREG**;
:HALT;
stop
else (No)
:R1 <-- R1 + 2
JSR divide;
endif

rectangle "                    divide" {
:SAVEREG1 <-- R0
SAVEREG2 <-- R1
SAVEREG3 <-- R2
R4 <-- R4 && 0
R2 <-- !R1
R2 <-- R2 + 1;
rectangle "                    SUB" {

repeat:R4 <-- R4 + 1\nR0 <-- R0 + R2;
repeat while (R0 ?= 0 || R0 ?= Positive) is (Yes)
-> No;
:R4 <-- R4 + (-1)
R5 <-- R5 && 0
R5 <-- R0 + R1
R0 <-- SAVEREG1
R1 <-- SAVEREG2
R2 <-- SAVEREG3
RET;
}
}
:R5 <-- !R5
R5 <-- !R5;
}
if (R5 ?= Postive || R5 ?= Negative) then (Yes)
:**ODD**;
stop
else (No)
:**NOTPRIME**;
:**RESTOREREG**;
:HALT;
stop
endif'/





@enduml