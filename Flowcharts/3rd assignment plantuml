@startuml

:R0 <-- MSG ("Input a 2 digit decimal number: "
    PUTSP
    JSR readS;

rectangle "                 readS" {
:M[SAVEREG1] <-- R1
M[SAVEREG2] <-- R2
M[SAVEREG3] <-- R3
R2 <-- R2 && 0
R3 <-- R2 + 5
IN (Recieve input from keyboard)
R1 <--R2 + R0
IN (Recieve input from keyboard)
R2 <-- M[CVT] (Convert to corresponding decimal value)
R0 <-- R0 + R2
R1 <-- R1 + R2
R2 <-- R2 && 0;

repeat:R2 <-- R2 + R1\nR3 <-- R3 + (-1);
repeat while (R3 ?= 0) is (No)
-> Yes;
:R2 <-- R2 + R2
R0 <-- R2 + R0
R1 <-- SAVEREG1
R2 <-- SAVEREG2
R3 <-- SAVEREG3
RET;
}

:JSR isPrime;

rectangle "                 isPrime" {

:SAVE2REG1 <-- R1
SAVE2REG2 <-- R2
SAVE2REG3 <-- R3
SAVE2REG4 <-- R4
SAVE2REG5 <-- R5
RETURNADDRESS <-- R7;

:R1 <-- R0 + (-2);

if (R1 ?= 0) then (Yes)
:**Prime**
R0 <-- R0 && 0
R0 <-- R0 + 1;
:**RESTOREREG**
R1 <-- SAVE2REG1
R2 <-- SAVE2REG2
R3 <-- SAVE2REG3
R4 <-- SAVE2REG4
R5 <-- SAVE2REG5
R7 <-- RETURNADDRESS
RET;
:HALT;
stop

else (No)
:R1 <-- R0 + 1;
endif
if (R1 ?= 0) then (Yes)
:**notPrime**;
else (No)
:AND R2, R2, x0
    ADD R2, R2, x-1;
endif

}

@enduml